import configparser
import telebot
from telebot import types
import sql

config = configparser.ConfigParser()
config.read("config.ini")
token = config["main"]["TOKEN"]
bot = telebot.TeleBot(token)
allow_add_client = 0
current_data = {}
current_operation = None


def current_data_clear():
    global current_data
    current_data = {
        'operation': None,
        'client': None,
        'type_train': None,
        'data': None,
        'time': None,
        'price': None
    }


def validate_phone(message):
    phone_number = message.contact.phone_number
    if len(phone_number) == 12 and phone_number[0:2] == '+7':
        return int(phone_number[2:])
    elif len(phone_number) == 11:
        if phone_number[0:1] == '7' or phone_number[0:1] == '8':
            return int(phone_number[1:])
    else:
        bot.send_message(message.from_user.id, "–û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! –ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞")
        return 0


def generate_button(list_obj, name_operation, data_for_callback=None):
    current_data['operation'] = f'{name_operation}'
    pass


@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("‚ûï –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç")
    btn2 = types.KeyboardButton("üìì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")
    btn3 = types.KeyboardButton("üí∞ –£—á–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")
    markup.add(btn1, btn3)
    markup.add(btn2)
    bot.send_message(message.chat.id, text="–ü—Ä–∏–≤–µ—Ç, –ö–∞—Ç—é–Ω—å! –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?".format(message.from_user),
                     reply_markup=markup)
    current_data_clear()


@bot.message_handler(commands=['show_all_type_train'])
def show_all_type_train(message):
    list_train = sql.list_all_train()
    markup = types.InlineKeyboardMarkup(row_width=3)
    current_data['operation'] = 'choose_train'
    if int(list_train[1]) > 0:
        list_button = [types.InlineKeyboardButton(f'{i["type_train"]}', callback_data=f'{i["type_train"]}')
                       for i in list_train[2]]
        markup.add(*list_button)
        bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, '–°–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø—É—Å—Ç!')


@bot.message_handler(commands=['show_list_client'])
def show_list_client(message):
    list_client = sql.select_last_client()
    markup = types.InlineKeyboardMarkup(row_width=2)
    current_data['operation'] = 'choose_client'
    if int(list_client[1]) > 0:
        list_button = [types.InlineKeyboardButton(f'{i["name"]}', callback_data=f'{i["name"]}')
                       for i in list_client[2]]
        markup.add(*list_button)
        bot.send_message(message.chat.id, "–í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã:", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, '–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç!')


@bot.message_handler(content_types=['text', 'contact'])
def get_text_messages(message):
    global allow_add_client
    if message.content_type == 'contact':
        if allow_add_client == 1:
            phone_number = validate_phone(message)
            search_client = sql.search_client(phone_number)
            if not phone_number:
                bot.send_message(message.from_user.id, "–¢–∞–∫–æ–π –∫–ª–∏–µ–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ")
            else:
                if int(search_client[1]) == 0:
                    sql.insert_client_data(phone_number,
                                           message.contact.first_name,
                                           message.contact.last_name)
                    bot.send_message(message.from_user.id, "–ê–≥–∞, –¥–æ–±–∞–≤–∏–ª")
        else:
            bot.send_message(message.from_user.id, "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –ø—É–Ω–∫—Ç <‚ûï –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç>")
        allow_add_client = 0
    elif message.content_type == 'text':
        if message.text == '‚ûï –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç':
            print('OK')
            bot.send_message(message.from_user.id, "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–æ–Ω—Ç–∞–∫—Ç –∏ —è –¥–æ–±–∞–≤–ª—é –µ–≥–æ –≤ –∫–ª–∏–µ–Ω—Ç—ã")
            allow_add_client = 1
        elif message.text == 'üìì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫':
            markup = types.InlineKeyboardMarkup(row_width=2)
            button1 = types.InlineKeyboardButton("–í—ã–≤–µ—Å—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data='show_schedule')
            button2 = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data='add_train')
            markup.add(button1, button2)
            bot.send_message(message.chat.id, "–ü–æ—Ä–∞–±–æ—Ç–∞–µ–º —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º?", reply_markup=markup)
        elif message.text == 'üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            start(message)


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            if current_data['operation'] == 'choose_client':
                current_data['client'] = call.data
                print(current_data['client'])
            elif current_data['operation'] == 'choose_train':
                pass
            elif current_data['operation'] == 'choose_time':
                pass

                # if call.data == 'add_train':
                #     bot.send_message(call.message.chat.id, "–ù–∞–∂–∞–ª–∏ –≤—ã–≤–µ—Å—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
                #     bot.send_chat_action()
                # elif call.data == 'show_schedule':
                pass
    except Exception as e:
        print(repr(e))


bot.infinity_polling()
